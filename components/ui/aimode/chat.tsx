'use client';
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/LOyl5Wee15h
 */

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { AvatarImage, AvatarFallback, Avatar } from '@/components/ui/avatar';
import { Chatbot } from '@prisma/client';
import { Icons } from '../../icons';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';

import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
  CardDescription,
} from '../../ui/card';
import {
  Message,
  // import as useAssistant:
  experimental_useAssistant as useAssistant,
} from 'ai/react';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { ChatbotConfig } from '@/types';
import { toast } from '@/components/ui/use-toast';
import { ChatbotConfigDefault } from '@/types/default';

interface ChatbotProps {
  chatbot: Pick<Chatbot, 'id' | 'name' | 'welcomeMessage'>;
  defaultMessage: string;
}

interface Message {
  role: string;
  content: string;
}

export function Chat({ chatbot, defaultMessage, ...props }: ChatbotProps) {
  const [loading, setLoading] = useState(true);
  const [called, setCalled] = useState(false);

  const [config, setConfig] = useState<ChatbotConfig>();

  // inquiry
  const [userMessage, setUserMessage] = useState('');
  const [conversations, setConversations] = useState<Message[]>([]);
  const [actualPrompt, setActualPrompt] = useState<string>('');

  useEffect(() => {
    const fetchPromptData = async () => {
      try {
        const response = await fetch(`/api/aimode/${chatbot.id}/chat`);
        if (!response.ok) {
          throw new Error('Failed to fetch prompt data');
        }
        const responseData = await response.json();
        console.log(responseData);
        setActualPrompt(responseData);
      } catch (error) {
        console.error('Error fetching prompt data:', error);
      }
    };
    fetchPromptData();
  }, []);

  const sendMessage = async () => {
    console.log('$$$$$$$$$send message$$$$$$$$$$');
    try {
      // Send user message to the backend API
      setCalled(true);
      setConversations((prevConversations) => [
        ...prevConversations,
        { role: 'user', content: userMessage },
      ]);

      const roles =
        conversations.length > 0
          ? conversations.map((message) => message.role)
          : [];
      const contents =
        conversations.length > 0
          ? conversations.map((message) => message.content)
          : [];

      // Add the current user message manually
      const userRole = 'user';
      const userContent = userMessage;

      const response = await fetch(`/api/aimode/${chatbot.id}/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          role: [...roles, userRole],
          content: [...contents, userContent],
          actualPrompt: actualPrompt,
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to send message: ${response.statusText}`);
      }

      // Receive response from the backend API
      const responseData = await response.json();
      console.log('++++++++++++++++=====');
      console.log(responseData);

      // Update state with new conversation
      setConversations((prevConversations) => [
        ...prevConversations,
        { role: 'assistant', content: responseData },
      ]);

      // Clear input field
      setUserMessage('');
      setCalled(false);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  useEffect(() => {
    const init = async () => {
      setLoading(true);
      // const config = await fetch(`/api/chatbots/${chatbot.id}/config`);
      // const chatbotConfig: ChatbotConfig = await config.json();

      console.log('INside chat');
      console.log(chatbot.id);

      const chatbotDetails = await fetch(`/api/aimode/${chatbot.id}`);
      const details = await chatbotDetails.json();
      console.log(details);
      // let data = ChatbotConfigDefault;
      // data.welcomeMessage = details.welcomeMessage;
      // data.chatTitle
      let configData = ChatbotConfigDefault;
      configData.chatTitle = 'Chat with ' + details.buesinessName;
      configData.welcomeMessage = details.welcomeMessage;
      setConfig(configData);
      setLoading(false);
    };
    init();
  }, []);

  // useEffect(() => {
  //   if (defaultMessage !== '') {
  //     input === '' &&
  //       handleInputChange({
  //         target: { value: defaultMessage },
  //       } as React.ChangeEvent<HTMLInputElement>);
  //   }
  // });

  return (
    <Card className="flex border flex-col w-full overflow-hidden flex-grow">
      <CardHeader className="border-b p-4">
        <h2 className="text-xl font-bold flex items-center gap-2">
          <Avatar className="relative overflow-visible w-10 h-10">
            <span className="absolute right-0 top-0 flex h-3 w-3 rounded-full bg-green-600" />
            <AvatarImage
              alt="User Avatar"
              src="https://identicons.pgmichael.com/"
            />
            <AvatarFallback>U</AvatarFallback>
          </Avatar>
          <div>
            {config ? config!.chatTitle : ''}
            <span className="text-xs text-green-600 block">Online</span>
          </div>
        </h2>
      </CardHeader>
      <CardContent className="border-b overflow-auto p-4 flex-1">
        <div className="space-y-4">
          <div key="welcomemessage" className="flex items-end gap-2">
            <div
              className="rounded-lg bg-zinc-200 p-2"
              style={{
                background: config ? config.chatbotReplyBackgroundColor : '',
              }}
            >
              <p
                className="text-md"
                style={{ color: config ? config.chatbotReplyTextColor : '' }}
              >
                {config ? config!.welcomeMessage : ''}
              </p>
            </div>
          </div>
          {conversations.map((message: any) => {
            if (message.role === 'assistant') {
              const currentChatbotReply =
                conversations
                  .filter((message: any) => message.role === 'assistant')
                  .indexOf(message) + 1;
              return (
                <div key={message.id} className="flex items-end gap-2">
                  <div
                    className="rounded-lg bg-zinc-200 text-md p-2"
                    style={{
                      color: config ? config.chatbotReplyTextColor : '',
                      background: config
                        ? config.chatbotReplyBackgroundColor
                        : '',
                    }}
                  >
                    {message.content
                      .replace(/\【.*?】/g, '') // Remove citation markers
                      .split('```')
                      .map((block, blockIdx) => {
                        // Check if the block is a code block or normal text
                        if (blockIdx % 2 === 1) {
                          // Render code block
                          return (
                            <pre key={blockIdx}>
                              <code>{block}</code>
                            </pre>
                          );
                        } else {
                          // Process normal text for ** and \n
                          return block
                            .split('\n')
                            .map((line, lineIndex, lineArray) => (
                              <p
                                key={`${blockIdx}-${lineIndex}`}
                                className={`text-md ${
                                  lineIndex < lineArray.length - 1 ? 'mb-4' : ''
                                }`}
                              >
                                {line
                                  .split('**')
                                  .map((segment, segmentIndex) => {
                                    // Render bold text for segments surrounded by **
                                    if (segmentIndex % 2 === 1) {
                                      return (
                                        <strong key={segmentIndex}>
                                          {segment}
                                        </strong>
                                      );
                                    } else {
                                      // Replace URLs with Next.js Link tags or standard <a> tags
                                      const markdownLinkRegex =
                                        /\[([^\]]+)\]\((https?:\/\/[^\s]+[^.])\)/g;
                                      const regularLinkRegex =
                                        /(https?:\/\/[^\s]+[^.])/g;
                                      const segments =
                                        segment.split(markdownLinkRegex);

                                      return segments.map((seg, idx) => {
                                        if (idx % 3 === 1) {
                                          // Render markdown-style link
                                          return (
                                            <Link
                                              className="underline"
                                              target="_blank"
                                              key={idx}
                                              href={segments[idx + 1]}
                                            >
                                              {segments[idx]}
                                            </Link>
                                          );
                                        } else if (idx % 2 === 0) {
                                          // Render normal text or regular link
                                          const normalLinkSegments =
                                            seg.split(regularLinkRegex);
                                          return normalLinkSegments.map(
                                            (linkSeg, linkIdx) => {
                                              if (linkIdx % 2 === 1) {
                                                // Render regular link
                                                return (
                                                  <Link
                                                    className="underline"
                                                    target="_blank"
                                                    key={`${idx}-${linkIdx}`}
                                                    href={linkSeg}
                                                  >
                                                    {linkSeg}
                                                  </Link>
                                                );
                                              } else {
                                                // Render normal text
                                                return (
                                                  <span
                                                    key={`${idx}-${linkIdx}`}
                                                  >
                                                    {linkSeg}
                                                  </span>
                                                );
                                              }
                                            }
                                          );
                                        } else {
                                          // Skip the URL itself, as it's already rendered inside the Link
                                          return null;
                                        }
                                      });
                                    }
                                  })}
                              </p>
                            ));
                        }
                      })}
                    {/* {
                      // Check if it's the first message after X number of assistant replies and the link hasn't been added yet
                      currentChatbotReply > 0 &&
                        currentChatbotReply ==
                          config!.inquiryDisplayLinkAfterXMessage &&
                        status !== 'in_progress' &&
                        config!.inquiryEnabled && (
                          <button
                            className="mt-4 flex flex-row items-center text-sm justify-center text-blue-600 hover:text-blue-800 focus:outline-none focus:underline"
                            type="button"
                            onClick={() => setSendInquiry(!sendInquiry)}
                          >
                            {config!.inquiryLinkText}
                          </button>
                        )
                    } */}
                  </div>
                </div>
              );
            } else {
              return (
                <div
                  key={message.id}
                  className="flex items-end gap-2 justify-end"
                >
                  <div
                    className="rounded-lg flex max-w-5/6 bg-blue-500 text-white p-2 self-end"
                    style={{
                      background: config ? config.userReplyBackgroundColor : '',
                    }}
                  >
                    <p
                      className="text-md"
                      style={{ color: config ? config.userReplyTextColor : '' }}
                    >
                      {message.content}
                    </p>
                  </div>
                </div>
              );
            }
          })}
          {/* {status !== 'in_progress' && sendInquiry && (
            <div className="bg-white border-t-2 rounded-lg shadow-md w-5/6">
              <form onSubmit={handleInquirySubmit}>
                <Card className="border-0 h-full shadow-none">
                  <CardHeader>
                    <CardTitle>{config!.inquiryTitle}</CardTitle>
                    <CardDescription>{config!.inquirySubtitle}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="email">
                          {config!.inquiryEmailLabel}
                        </Label>
                        <Input
                          onChange={(e) => setUserEmail(e.target.value)}
                          className="bg-white"
                          id="email"
                          type="email"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="message">
                          {config!.inquiryMessageLabel}
                        </Label>
                        <Textarea
                          onChange={(e) => setUserMessage(e.target.value)}
                          className="min-h-[100px]"
                          id="message"
                        />
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button
                      type="submit"
                      disabled={inquiryLoading}
                      className="bg-black text-white"
                    >
                      {config!.inquirySendButtonText}
                      {inquiryLoading && (
                        <Icons.spinner className="mr-2 h-5 w-5 animate-spin" />
                      )}
                    </Button>
                  </CardFooter>
                </Card>
              </form>
            </div>
          )} */}
        </div>
      </CardContent>
      <CardFooter className="p-4">
        <div className="w-full flex items-center gap-2">
          <div className="flex align-right gap-2 items-end w-full">
            <Input
              disabled={called}
              className="w-full border border-gray-300 rounded shadow-sm"
              value={userMessage}
              placeholder={config ? config!.chatMessagePlaceHolder : ''}
              onChange={(e) => setUserMessage(e.target.value)}
            />
            <Button
              disabled={called}
              className="flex-none w-1/3"
              onClick={sendMessage}
            >
              {called && (
                <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
              )}
              Send
            </Button>
          </div>
        </div>
      </CardFooter>
    </Card>
  );
}
